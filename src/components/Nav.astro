---
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import Link from '@/components/Link.astro'
import Github from '../assets/Github.svg?url'
import Discord from '../assets/Discord.svg?url'
import Logo from '../assets/Logo.svg?url'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const links = [
  {
    to: '/',
    name: t('nav.home'),
  },
  {
    to: '#',
    name: t('nav.values'),
  },
  {
    to: '#',
    name: t('nav.projects'),
  },
  {
    to: '#',
    name: t('nav.events'),
  },
  {
    to: '#',
    name: t('nav.contributor'),
  },
] satisfies Array<{ to: string; name: string }>

const socialLinks = [
  {
    to: 'https://www.github.com/Afordin',
    name: 'github',
    icon: Github,
  },
  {
    to: 'https://discord.com/invite/comuafor',
    name: 'discord',
    icon: Discord,
  },
] satisfies Array<{ to: string; name: string; icon: any }>
---

<header
  class="font-manrope fixed inset-x-0 top-0 z-50 mx-auto max-h-40 max-w-7xl px-4 transition-transform duration-300 ease-in-out"
>
  <nav
    class="mt-6 flex items-center justify-between gap-6 rounded-full border border-orange-600/20 bg-gradient-to-br from-white/15 to-white/0 px-8 py-4 shadow-lg backdrop-blur-md transition-all duration-300 ease-in-out"
  >
    <div>
      <Link to="/">
        <svg width="37" height="37" viewBox="0 0 37 47" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g id="Vector">
            <path
              d="M20.3901 8.85058C20.3901 7.6771 19.9205 6.55173 19.0847 5.72182C18.2487 4.89201 17.1148 4.42565 15.9326 4.4253C17.1148 4.42493 18.2487 3.95859 19.0847 3.12875C19.9205 2.29885 20.3901 1.17347 20.3901 0C20.3901 1.17356 20.8597 2.29912 21.6959 3.12903C22.5319 3.95894 23.6661 4.42521 24.8485 4.4253C23.6661 4.42539 22.5319 4.89164 21.6959 5.72155C20.8597 6.55148 20.3901 7.67701 20.3901 8.85058Z"
              fill="white"
              class="svg-elem-1"></path>
            <path
              d="M25.9277 16.9019C25.5282 15.78 24.7886 14.8081 23.8105 14.1202C22.8323 13.4322 21.6632 13.0616 20.4643 13.0594C19.2654 13.0574 18.095 13.4237 17.1142 14.1083C16.1336 14.7928 15.3904 15.762 14.9871 16.8825L10.1769 30.2535H17.1537L20.4098 19.803L24.6567 34.0074L26.6464 39.8321C27.2775 41.8472 28.5415 43.6091 30.2536 44.8601C31.966 46.1113 34.0366 46.7858 36.1629 46.7853H36.5517L25.9277 16.9019Z"
              fill="white"
              class="svg-elem-2"></path>
            <path
              d="M4.23187 46.7862H4.5658C6.65098 46.786 8.68374 46.137 10.3778 44.9303C12.072 43.7237 13.3423 42.0202 14.01 40.0596L14.0879 39.8313L14.1452 39.6557H6.79547L4.23187 46.7862Z"
              fill="white"
              class="svg-elem-3"></path>
            <path
              d="M14.8126 38.2744C17.9856 37.7049 20.3919 34.95 20.3919 31.6364H6.68818C4.91447 31.6366 3.2134 32.3362 1.95921 33.581C0.705008 34.8257 0.000269739 36.5139 0 38.2744H14.8126Z"
              fill="white"
              class="svg-elem-4"></path>
          </g>
        </svg>
      </Link>
    </div>
    <div class="flex lg:hidden">
      <button
        type="button"
        id="menu-toggle"
        class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-white"
      >
        <span class="sr-only">Toggle menu</span>
        <svg class="hamburger-icon size-10" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
        </svg>
        <svg class="close-icon hidden size-10" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Navigation menu for large screens -->
    <div class="hidden lg:flex lg:items-center lg:gap-6">
      {
        links.map(({ name, to }, index) => (
          <>
            <Link
              {to}
              class="font-regular relative text-xl text-white after:absolute after:bottom-0 after:left-1/2 after:h-0.5 after:w-0 after:bg-white after:transition-all after:duration-300 hover:after:left-0 hover:after:w-full"
            >
              {name}
            </Link>
            {index < links.length - 1 && <span class="text-[8px] text-gray-300">‚óè</span>}
          </>
        ))
      }
    </div>

    <!-- Social media icons for large screens -->
    <div class="hidden items-center justify-center gap-4 lg:flex">
      {
        socialLinks.map(({ icon, name, to }) => (
          <Link external {to} class="inline-block transition-transform duration-300 hover:scale-110">
            <img src={icon} alt={`Icono de ${name}`} class="size-6" />
          </Link>
        ))
      }
    </div>
  </nav>

  <!-- Mobile menu -->
  <div
    class="pointer-events-none mx-auto mt-2 max-w-[95%] scale-95 transform opacity-0 transition-all duration-50 lg:hidden"
    id="mobile-menu"
    role="dialog"
    aria-modal="true"
  >
    <div
      class="flex flex-col gap-4 rounded-2xl border border-white/40 bg-gradient-to-br from-white/15 to-white/0 shadow-lg backdrop-blur-md"
    >
      <div class="flex flex-col items-center gap-5 pt-6 pb-4">
        {
          links.map(({ name, to }) => (
            <Link
              {to}
              class="relative font-semibold text-white after:absolute after:bottom-0 after:left-1/2 after:h-0.5 after:w-0 after:bg-white after:transition-all after:duration-300 hover:after:left-0 hover:after:w-full"
            >
              {name}
            </Link>
          ))
        }
      </div>
      <div class="flex flex-row items-center justify-center gap-6 border-t border-white/40 py-3">
        {
          socialLinks.map(({ icon, name, to }) => (
            <Link {to} external class="inline-block transition-transform duration-300 hover:scale-110">
              <img src={icon} alt={`Icono de ${name}`} class="size-8" />
            </Link>
          ))
        }
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menu-toggle')
    const hamburgerIcon = document.querySelector('.hamburger-icon')
    const closeIcon = document.querySelector('.close-icon')
    const mobileMenu = document.getElementById('mobile-menu')
    const nav = document.querySelector('nav')
    const header = document.querySelector('header')

    let lastScrollY = window.scrollY

    if (menuToggle && hamburgerIcon && closeIcon && mobileMenu) {
      let isMenuOpen = false

      menuToggle.addEventListener('click', () => {
        isMenuOpen = !isMenuOpen

        mobileMenu.classList.toggle('opacity-0', !isMenuOpen)
        mobileMenu.classList.toggle('scale-95', !isMenuOpen)
        mobileMenu.classList.toggle('pointer-events-none', !isMenuOpen)
        mobileMenu.classList.toggle('opacity-100', isMenuOpen)
        mobileMenu.classList.toggle('scale-100', isMenuOpen)
        mobileMenu.classList.toggle('pointer-events-auto', isMenuOpen)

        hamburgerIcon.classList.toggle('hidden', isMenuOpen)
        closeIcon.classList.toggle('hidden', !isMenuOpen)
      })
    }

    if (nav && header) {
      const initialMargin = 32
      const scrolledMargin = 24

      const handleScroll = () => {
        const scrollPosition = window.scrollY
        const scrollingDown = scrollPosition > lastScrollY

        let newMargin = initialMargin

        if (scrollPosition > 0) {
          newMargin = scrolledMargin
        }

        nav.style.marginTop = `${newMargin}px`

        if (scrollingDown && scrollPosition > 100) {
          header.classList.add('-translate-y-full')
        } else {
          header.classList.remove('-translate-y-full')
        }
        lastScrollY = scrollPosition
      }

      handleScroll()

      window.addEventListener('scroll', handleScroll)
    }
  })
</script>
