---
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import Link from '@/components/Link.astro'
import Youtube from '../assets/Youtube.svg?url'
import Twitch from '../assets/Twitch.svg?url'
import Github from '../components/ui/GitHubIcon.astro'
import Discord from '../components/ui/DiscordIcon.astro'
import LogoIcon from '../components/ui/LogoIcon.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const links = [
  {
    to: '/',
    name: t('nav.home'),
  },
  {
    to: '#',
    name: t('nav.values'),
  },
  {
    to: '#',
    name: t('nav.projects'),
  },
  {
    to: '#',
    name: t('nav.events'),
  },
  {
    to: '#',
    name: t('nav.contributor'),
  },
] satisfies Array<{ to: string; name: string }>

const socialLinks = [
  {
    to: 'https://www.github.com/Afordin',
    name: 'github',
    icon: Github,
  },
  {
    to: 'https://discord.com/invite/comuafor',
    name: 'discord',
    icon: Discord,
  },
  {
    to: 'https://www.youtube.com/@afor_lives',
    name: 'youtube',
    icon: Youtube,
  },
  {
    to: 'https://www.twitch.tv/afor_digital',
    name: 'twitch',
    icon: Twitch,
  },
] satisfies Array<{ to: string; name: string; icon: any }>
---

<header
  class="font-manrope fixed inset-x-0 top-0 z-50 mx-auto max-h-40 max-w-7xl px-4 transition-transform duration-300 ease-in-out"
>
  <nav
    class="mt-6 flex items-center justify-between gap-6 rounded-full border border-orange-600/20 bg-gradient-to-br from-white/15 to-white/0 px-8 py-4 shadow-lg backdrop-blur-md transition-all duration-300 ease-in-out"
  >
    <div>
      <Link to="/">
        <LogoIcon />
      </Link>
    </div>
    <div class="flex lg:hidden">
      <button
        type="button"
        id="menu-toggle"
        class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-white"
      >
        <span class="sr-only">Toggle menu</span>
        <svg class="hamburger-icon size-10" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
        </svg>
      </button>
    </div>

    <!-- Navigation menu for large screens -->
    <div class="hidden lg:flex lg:items-center lg:gap-6">
      {
        links.map(({ name, to }, index) => (
          <>
            <Link
              {to}
              class="font-regular relative text-xl text-white after:absolute after:bottom-0 after:left-1/2 after:h-0.5 after:w-0 after:bg-white after:transition-all after:duration-300 hover:after:left-0 hover:after:w-full"
            >
              {name}
            </Link>
            {index < links.length - 1 && <span class="text-[8px] text-gray-300">●</span>}
          </>
        ))
      }
    </div>

    <!-- Social media icons for large screens -->
    <div class="hidden items-center justify-center gap-4 lg:flex">
      {
        socialLinks.map(({ icon: Icon, to }) => (
          <Link to={to} external class="inline-block transition-transform duration-300 hover:scale-110">
            <Icon class="h-6 w-6" />
          </Link>
        ))
      }
    </div>
  </nav>

  <!-- Mobile menu -->
  <div
    class="pointer-events-none fixed inset-0 z-50 flex transform items-center justify-center opacity-0 transition-all duration-50 lg:hidden"
    id="mobile-menu"
    aria-modal="true"
    aria-label="Sections"
  >
    <div
      class="flex h-screen w-full flex-col gap-4 bg-gradient-to-br from-purple-950/80 to-black shadow-lg backdrop-blur-md"
    >
      <div class="mt-6 flex justify-center p-2">
        <button
          type="button"
          id="mobile-close-button"
          class="inline-flex items-center justify-center rounded-md p-2 text-white"
          aria-label="Close Menu"
        >
          <svg class="size-10" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div class="flex flex-col items-center gap-8 py-16">
        {
          links.map(({ name, to }) => (
            <Link
              to={to}
              class="relative text-xl font-semibold text-white after:absolute after:bottom-0 after:left-1/2 after:h-0.5 after:w-0 after:bg-white after:transition-all after:duration-300 hover:after:left-0 hover:after:w-full"
            >
              {name}
            </Link>
          ))
        }
      </div>

      <div class="mt-auto flex flex-col items-center justify-center gap-6 border-t border-white/30 py-6">
        <div>
          <span>Diseñado y desarrollado por Comuafor ❤️</span>
        </div>
        <div class="flex flex-row items-center justify-center gap-6">
          {
            socialLinks.map(({ icon: Icon, name, to }) => (
              <Link to={to} external class="inline-block transition-transform duration-300 hover:scale-110">
                <Icon class="h-6 w-6" alt={`Icono de ${name}`} />
              </Link>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menu-toggle')
    const mobileCloseButton = document.getElementById('mobile-close-button')
    const mobileMenu = document.getElementById('mobile-menu')
    const nav = document.querySelector('nav')
    const header = document.querySelector('header')

    let lastScrollY = window.scrollY
    let isMenuOpen = false

    const openMenu = () => {
      isMenuOpen = true
      if (mobileMenu) {
        mobileMenu.classList.remove('opacity-0', 'scale-95', 'pointer-events-none')
        mobileMenu.classList.add('opacity-100', 'scale-100', 'pointer-events-auto')
      }
      document.body.classList.add('overflow-hidden')
    }

    const closeMenu = () => {
      isMenuOpen = false
      if (mobileMenu) {
        mobileMenu.classList.add('opacity-0', 'scale-95', 'pointer-events-none')
        mobileMenu.classList.remove('opacity-100', 'scale-100', 'pointer-events-auto')
      }
      document.body.classList.remove('overflow-hidden')
    }

    if (menuToggle) {
      menuToggle.addEventListener('click', openMenu)
    }

    if (mobileCloseButton) {
      mobileCloseButton.addEventListener('click', closeMenu)
    }

    const mobileLinks = mobileMenu ? mobileMenu.querySelectorAll('a') : []
    mobileLinks.forEach((link) => {
      link.addEventListener('click', closeMenu)
    })

    if (nav && header) {
      const initialMargin = 32
      const scrolledMargin = 24

      const handleScroll = () => {
        const scrollPosition = window.scrollY
        const scrollingDown = scrollPosition > lastScrollY

        let newMargin = initialMargin

        if (scrollPosition > 0) {
          newMargin = scrolledMargin
        }

        nav.style.marginTop = `${newMargin}px`

        if (scrollingDown && scrollPosition > 100 && !isMenuOpen) {
          header.classList.add('-translate-y-full')
        } else {
          header.classList.remove('-translate-y-full')
        }
        lastScrollY = scrollPosition
      }

      handleScroll()
      window.addEventListener('scroll', handleScroll)
    }
  })
</script>
